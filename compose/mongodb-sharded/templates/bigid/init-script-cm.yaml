apiVersion: v1
kind: ConfigMap
metadata:
  name: bigid-mongodb-init-scripts
  namespace: {{ .Release.Namespace | quote }}
data:
  my_init_script.sh: |
    #!/bin/bash
    set -e
    mongosh ${MONGO_EXTERNAL_FULL_URL} <<EOF
    use admin
    if (!db.getUser("bigid")) {
      db.createUser({
        user: "bigid",
        pwd: "password",
        roles: [
          { role: "root", db: "admin" }
        ]
      });
    }
    use bigid-server
    if (!db.getUser("datadog")) {
      db.createUser({
        user: "datadog",
        pwd: "password",
        roles: [
          { role: "read", db: "admin" },
          { role: "clusterMonitor", db: "admin" },
          { role: "read", db: "local" }
        ]
      });
    }

    if (!db.getUser("bigid")) {
      db.createUser({
        user: "bigid",
        pwd: "password",
        roles: [
          { role: "dbAdmin", db: "admin" },
          { role: "readWriteAnyDatabase", db: "admin" }
        ]
      });
    }

    sh.enableSharding("bigid-server")

    var primaryShard = db.adminCommand({ getShardVersion: 'bigid-server' })['primaryShard']
    var shards = db.adminCommand({ listShards: 1 }).shards
    var nonPrimaryShards = shards.filter(function(shard) {
      return shard._id !== primaryShard;
    });
    var nonPrimaryShard = nonPrimaryShards[0]._id
    nonPrimaryShard

    sh.addShardToZone(nonPrimaryShard, "BIGID-SHARD-ZONE")
    sleep(1000)

    sh.updateZoneKeyRange("bigid-server.pii_records",{"fullCollectionName": MinKey },{"fullCollectionName": MaxKey },"BIGID-SHARD-ZONE")
    db.runCommand({'createIndexes': "pii_records", 'indexes': [{ 'name': 'fullCollectionName_hashed', 'key': {'fullCollectionName': 'hashed'}}]})
    sh.shardCollection("bigid-server.pii_records", { "fullCollectionName": "hashed" })
    sleep(1000)

    sh.updateZoneKeyRange("bigid-server.pii_findings",{"fullCollectionName": MinKey },{"fullCollectionName": MaxKey },"BIGID-SHARD-ZONE")
    db.runCommand({'createIndexes': "pii_findings", 'indexes': [{ 'name': 'fullCollectionName_hashed', 'key': {'fullCollectionName': 'hashed'}}]})
    sh.shardCollection("bigid-server.pii_findings", { "fullCollectionName": "hashed" })
    sleep(1000)

    sh.updateZoneKeyRange("bigid-server.jit_records",{"fullCollectionName": MinKey },{"fullCollectionName": MaxKey },"BIGID-SHARD-ZONE")
    db.runCommand({'createIndexes': "jit_records", 'indexes': [{ 'name': 'fullCollectionName_hashed', 'key': {'fullCollectionName': 'hashed'}}]})
    sh.shardCollection("bigid-server.jit_records", { "fullCollectionName": "hashed" })
    sleep(1000)

    sh.updateZoneKeyRange("bigid-server.classification_records",{"fullyQualifiedName": MinKey },{"fullyQualifiedName": MaxKey },"BIGID-SHARD-ZONE")
    db.runCommand({'createIndexes': "classification_records", 'indexes': [{ 'name': 'fullyQualifiedName_hashed', 'key': {'fullyQualifiedName': 'hashed'}}]})
    sh.shardCollection("bigid-server.classification_records", { "fullyQualifiedName": "hashed" })
    sleep(1000)

    db.runCommand({'createIndexes': "classification_findings", 'indexes': [{ 'name': 'fullyQualifiedName_hashed', 'key': {'fullyQualifiedName': 'hashed'}}]})
    sh.updateZoneKeyRange("bigid-server.classification_findings",{"fullyQualifiedName": MinKey },{"fullyQualifiedName": MaxKey },"BIGID-SHARD-ZONE")
    sh.shardCollection("bigid-server.classification_findings", { "fullyQualifiedName": "hashed" })
    sleep(1000)

    sh.updateZoneKeyRange("bigid-server.application_annotations",{"fully_qualified_name": MinKey },{"fully_qualified_name": MaxKey },"BIGID-SHARD-ZONE")
    db.runCommand({'createIndexes': "application_annotations", 'indexes': [{ 'name': 'fullyQualifiedName_hashed', 'key': {'fullyQualifiedName': 'hashed'}}]})
    sh.shardCollection("bigid-server.application_annotations", { "fully_qualified_name": 1})

    EOF

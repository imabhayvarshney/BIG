# Available parameters and their default values for the BigID chart.
global:
  # Default node selector for BigID services
  # example: nodeSelector: eks.amazonaws.com/capacityType: ON_DEMAND
  nodeSelector: {}
  ## @param affinity Affinity for pod assignment.
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}
  ## @param master.tolerations Tolerations for master-eligible pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []
  ## @param podAnnotations Annotations for BigiD pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  podAnnotations: {}
  ## Pod labels.
  ## Ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}
  ## Used to pass Labels for selecting BigID Services
  ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
  additionalLabels: {}
  ## @param commonAnnotations Annotations to add to all deployed objects
  ##
  commonAnnotations: {}
  # BigID Auth key
  authKey: ""
  # BigID Secret key
  secretKey: ""
  ## @param global.existingSecretKeyName
  ## The name of an existing secret to be used for the secret key.
  existingSecretKeyName: ""
  # BigID Secret Salt - Required For FIPS deployment
  secretSalt: ""
  # BigID Payload encryption key
  payloadEncKey: ""
  ## @param global.extraEnvVars Array with extra environment variables to add to BigID Deployments
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param global.extraEnvVarsCM Name of existing ConfigMap with extra env vars for BigID Deployments
  extraEnvVarsCM: ""
  ## @param global.extraEnvVarsSecret Name of existing Secret with extra env vars for BigID Deployments
  extraEnvVarsSecret: ""
  ## @param extraVolumes Array to add extra volumes
  extraVolumes: []
  ## @param extraVolumeMounts Array to add extra mounts
  extraVolumeMounts: []
  ## @param global.imageRegistry Global Docker image registry for Bitnami charts
  imageRegistry: ""

  ## @param global.image Global image values for BigID deployments
  image:
    repository: bigid
    tag: release
    pullPolicy: IfNotPresent

  ## @param global.imageCredentials - Username/Password Docker registry credentials.
  imageCredentials:
    enabled: true
    registry: https://index.docker.io/v1/
    username: ""
    password: ""
  ## @param global.imagePullSecrets Existing Kubernetes secret for Docker registry.
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets:
    - registrypullsecret

  ## @param global.ingress - BigID Ingress resource for BigID UI
  ingress:
    ## Options: nginx, alb, kong
    class: ""
    bigidHost: "bigid.example.com"
    rabbitmqHost: ""
    annotations: {}
      # alb.ingress.kubernetes.io/target-type: instance

  ## BigiD APM Monitoring, Support: NewRelic, DataDog.
  apm:
    enabled: false
    type: datadog ## Types: "newrelic", "datadog".
    customerName: ""
    ## NewRelic Key.
    key: ""
  ## Wait for Container Tag
  bigidInitWaitForTag: release-1
  ## BigID FIPS Mode
  fips:
    enabled: false

  ## System time zone.
  timeZone: UTC # Asia/Jerusalem

  ## InitContainers configuration for BigID internal healthchecks
  initContainers:
    image:
      registry: ""
      repository: alpine
      tag: edge
    resources:
      requests:
        memory: 256Mi
        cpu: 50m
      limits:
        memory: 512Mi
        cpu: 250m

    ## @param global.initContainers.containerSecurityContext Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      capabilities:
        drop:
        - ALL
        - NET_RAW
      allowPrivilegeEscalation: false

  ## BigID Services values
  bigid:
    ## @param global.bigid.containerSecurityContext Security Context for BigID containers
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      capabilities:
        drop:
        - ALL
        - NET_RAW
      allowPrivilegeEscalation: false

    # param to save the scanner logs in the DB
    saveScannerLogsInDbEnabled: false

    ## @param global.bigid.podSecurityContext Security Context for BigID pods
    podSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true

    # Set to true to enable the dynamic modify scan window
    dynamicModifyScanWindowFF:
      enabled: true

    # Set to true to enable vendors feature
    vendorsDirectoryEnabledFF: false

    # Set to false to disable the Connectivity Experience feature
    connectivityExperienceEnabled: true

    # Set to true to enable the New Tab Experience For New Connectivity feature
    newConnectionTabEnabled: false

    # Set to true to enable the DS Collaboration feature
    dsCollaborationEnabled: false

    # Set to true to enable the DS Onboarding Layout
    dsOnboardingLayoutEnabled: false

    # Set to true to enable the Suggested Actions Feature
    suggestedActionsEnabled: false

    # Set to true to enable the Classifier Tester feature
    classifierTester:
      enabled: true

    # Set to false to disable the use of Software as a Service (SaaS)
    useSaas:
      enabled: false

    # Set to false to disable services logs
    shouldDisableLogs: false

    # Set to false to disable Multi-Tenant Mode
    multiTenantMode:
      enabled: false
      # Specify the regular expression to match tenant domain patterns
      tenantDomainRegex: "(http[s]?://)?(.*bigid[.]cloud)"
      generateAndUseMongoCreds: false

    # Set to false to not use display names for policy feature flag
    useDisplayNameForPolicyFF: false

    # Set to false to disable the Unified Vaults feature
    enableUnifiedVaults: false

    # Set to false to disable bigchat
    bigchatFFEnabled: false

    # Specify the env that is sent in events to DL
    saasEnv: ""

    # Set too false to disable the use of scan page state feature flag
    useScanPageStateFF: true

    #Set to false to disable the use of scan template
    enableScanTemplateFF: true

    # Set to false in order to use the legacy scan jobs
    scanJobsInMemoryEnabled: true

    # Set to false to not disable the legacy ACL (Access Control List) feature flag
    disableLegacyAclFF: true

    # Set to false to disable sensitivity classification v2
    sensitivityClassificationV2Enabled: true

    # Set to false to disable aci dashboard v2
    aciDashboardUiV2Enabled: true

    # Set to false to disable new scan insight for labeling
    newScanInsightForLabelingEnabled: true

    # Set to true to enable new smb v2 aci feature
    smbV2AciEnabled: false

    # Set to true to enable aci for folders feature
    aciSupportForFoldersEnabled: false

    # Set to false to disable DSAR to CATALOG integration (DSAR_USE_CATALOG_COLUMNS_ENABLED_FF)
    dsarUseCatalogColumnsEnabled: true

    # Specify the company name
    companyName: ""

    # Log configuration settings
    logConfiguration:
      # Set to false to disable JSON logs
      jsonLogs:
        enabled: false
      # Specify the number of log files to keep
      amountOfLogsFile: 5

    # Set to true to enable the Scalable Health Check feature
    scalableHealthCheck:
      enabled: true

    #Set to true to create JWT for bigid application
    generateToken:
      enabled: false

    # Data Lake Client settings
    dataLakeClient:
      # Set to false to disable the Data Lake Client feature
      enabled: false
      # Specify the Data Lake stream name
      dlStreamName: ""
      dlRegionName: ""

    # Set to true to enable the Risk Assessment feature
    riskAssessment:
      enabled: true

    # Set to true to enable the Feedback Loop feature
    feedbackLoop:
      enabled: true

    # DataDog Metrics settings
    ddMetrics:
      # Specify the DataDog API key
      ddApiKey: ""
      # Specify the DataDog URI
      ddURI: ""
      # Set to false to disable DataDog integration
      dataDogEnabled: false

    # Backpressure settings
    backpressure:
      # Set to false to disable the Backpressure feature
      enabled: false
      # Set to false to not enable dry run for Backpressure
      dryRunEnabled: false
      # Specify the queues configuration for Backpressure
      queuesConfiguration: '[{"queue": "pii.findings.durable.queue","threshold": 10000}, {"queue": "correlator.correlation.queue","threshold": 10000}, {"queue": "correlator.classification.queue","threshold": 150000}, {"queue": "classification.findings.durable.queue","threshold": 10000}, {"queue": "catalog.object.scanned.queue","threshold": 150000}, {"queue": "catalog.object.scanned.bulk.queue","threshold": 2250}, {"queue": "catalog.source.piisummary.queue","threshold": 150000}, {"queue": "enrichment.findings.queue","threshold": 10000}, {"queue": "catalog.object.scan.completed.queue","threshold": 300000}]'
      # Specify the cron expression for reporting queues metrics
      reportQueuesMetricsCronExp: "*/30 * * * * *"
      # Specify the window in minutes for excessive load detection
      excessiveLoadDetectionWindowInMin: 5
      # Specify the cron expression for system overload detection
      systemOverloadDetectionCronExp: "*/40 * * * * *"
      # Specify the maximum allowed concurrent scanner jobs
      allowedConcurrentScannerJobs: 0
      # Specify the recovery threshold percentage
      recoveryThresholdPercentage: 40
      # Specify the time-to-live in seconds for status
      statusTtlSec: 120

    # Set to true to enable the DSPM feature
    actionableInsights:
      enabled: false

    ## BigID Services values
    scanner:
      replicaCount: 1
      ## @param global.bigid.scanner.remote.enabled - Enable BigID Remote scanner.
      remote:
        enabled: false
      nodeSelector: {}
      hadoop:
        create: false
        fullnameOverride: ""
        groupName: "SCANNER_WITH_HADOOP_GROUP"
      fullnameOverride: ""
      fipsMode:
        enabled: false
      resources:
        requests:
          memory: 14Gi
          cpu: 7
        limits:
          memory: 14Gi
          cpu: 7
      refreshToken: ""
      groupName: "default"
      JavaOpts: ""
      nfsV4:
        enabled: false
      ### Enable Service Account to Scanner pod
      serviceAccount:
        # Specifies whether a service account should be created
        create: false
        # Annotations to add to the service account
        annotations: {}
      ## @param extraVolumes Array to add extra volumes (evaluated as a template)
      ##
      extraVolumes: []
      ## @param extraVolumeMounts Array to add extra mounts (normally used with extraVolumes, evaluated as a template)
      ##
      extraVolumeMounts: []
      ## @param sidecars Attach additional containers to the pods (scheduler, worker and server nodes)
      ## e.g.
      ## sidecars:
      ##   - name: your-image-name
      ##     image: your-image
      ##     imagePullPolicy: Always
      ##     ports:
      ##       - name: portname
      ##         containerPort: 1234
      sidecars: []

    scaler:
      # Whether to create the scaler (true/false)
      create: false

      # Enable/disable the scannerController (Scanner deployment management)
      scannerController:
        enabled: false

      # Override the full name of the scaler (leave empty for default)
      fullnameOverride: ""

      # Define resource requests and limits for the scaler pods
      resources:
        requests:
          memory: 256Mi
          cpu: 200m
        limits:
          memory: 2Gi
          cpu: 1000m

      serviceAccount:
        annotations: {}

      # CPU scale-down threshold percentage
      cpuScaleDownThreshold: "20"

      # Queue scan parts threshold percentage
      queueScanPartsThreshold: "30"

      # Minimum number of pods the scaler can scale down to
      minPods: "1"

      # Maximum number of pods the scaler can scale up to
      maxPods: "3"

      # CPU usage threshold percentage for scaling actions
      cpuThreshold: "80"

    correlator:
      ## Ignite cluster configuration.
      ignite:
        enabled: false
        clusterName: ignite
        namespace: gridgain
        # Options: PARTITIONED / REPLICATED
        cacheMode: PARTITIONED
        backups: 3
      resources:
        requests:
          memory: 14Gi
          cpu: 3
        limits:
          memory: 14Gi
          cpu: 3
      maxConnectionsPerRoute: 5
      maxTotalConnections: 10
      terminationGracePeriodSeconds: 300
      autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 3

    ner:
      create: false
      resources:
        requests:
          memory: "3Gi"
          cpu: "2"
        limits:
          memory: "7Gi"
          cpu: "4"
      isNerProxy: false
      httpProxy: ""
      httpsProxy: ""

    labeler:
      create: false
      enableLabelerCustomCert: false
      httpProxy: ""
      httpsProxy: ""
      # when enabled, add the certificate named labeler-custom-cert.cert to modules/compose/helm.v3/charts/scanner/certs
      nodeSelector: {}

    web:
      port: 3000
      resources:
        requests:
          memory: 500Mi
          cpu: 250m
        limits:
          memory: 2Gi
          cpu: 1
      auth0Domain: ""
      auth0CustomDomain: ""
      auth0CloudClientSecret: ""
      auth0CloudClientId: ""
      cloudPortalApiUrl: "https://portal-api-staging.bigid.cloud"
      autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 5
        targetCPUUtilizationPercentage: 85

    ui:
      resources:
        requests:
          memory: "256Mi"
          cpu: "250m"
        limits:
          memory: "2Gi"
          cpu: "2500m"
      service:
        # Can be set to ClusterIP, NodePort
        type: ClusterIP
        # Service port will be 80 or 443 (On 443, a self-signed certificate will be used, or override ui.tls)
        # NGINX containerPort will be on unprivileged ports 8080/8443
        port: 80 ## 80,443  #443
        nodePort: 30846     #30443
        tls:
          certFile: ""
          keyFile: ""
          dhParam: ""
      autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 5
        targetCPUUtilizationPercentage: 85

    # To enable Clustering, you must enable NER as well.
    clustering:
      create: false
      hotspots:
        create: false

    confluent:
      create: false

    bigidme:
      create: false

    aci:
      create: false

    actionCenter:
      create: true

    reportingEtl:
      create: false

    collaboration:
      create: false

    tenantService:
      create: false
      port: 3558
      mongodb:
        adminTenantId: "00000000"
        bigidDbName: "bigid-server"

    reports:
      resources:
        requests:
          memory: "1Gi"
          cpu: "1"
        limits:
          memory: "6Gi"
          cpu: "1200m"

    orchestrator:
      correlationSetsInfrastructureEnabled: false
      terminationGracePeriodSeconds: 120
      appTerminationGracePeriodSeconds: "115"
      enableSseOnMlFF: true
      scalableDeletion:
        enabled: false
      scalablePiiFindingsDeletion:
        enabled: false
      newCredentialsFlow:
        enabled: false
      tpaMultipleDeployment:
        enabled: false
      classifierSuperscanPrefiltering:
        enabled: false
      cacheFindingsFilterTTLSec: 604800
      logLevel: trace
      resources:
        requests:
          memory: "1Gi"
          cpu: "1"
        limits:
          memory: "6Gi"
          cpu: "1200m"

    orchestrator2:
      port: 3003
      resources:
        requests:
          memory: "1Gi"
          cpu: "1"
        limits:
          memory: "6Gi"
          cpu: "1200m"
      consumer:
        create: false
        autoscaling:
          enabled: false
          minReplicas: 1
          maxReplicas: 5
          averageValue: 250
          completedQueueThreshold: 250
          targetCPUUtilizationPercentage: 75
      autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 5
        averageValue: 250
        completedQueueThreshold: 250
        targetCPUUtilizationPercentage: 75
        scaleDownPolicy:
          stabilizationWindowSeconds: 900
          periodSeconds: 300
          value: 10
      scalableDeletion:
        scheduleInterval: 10000
        jobTTL: 60000
        maxDeletionWorkers: 10
        chunkSize: 1000
        updatedAtFieldUpdatesIntervalMS: 5000
        hardStopWorkers: false
      deleteClassificationFindings:
        enabled: false
        deletionPeriodDays: 60
        scheduleInterval: 1440

    configService:
      replicaCount: 1
      port: 3004
      multiTenantConfigEnabled: false
      resources:
        requests:
          memory: "1Gi"
          cpu: "1"
        limits:
          memory: "6Gi"
          cpu: "2"

    processManager:
      create: false

    snippetPersister:
      create: false

    metadataSearch:
      create: false
      elasticsearchSsl:
        create: false

    catalogProcessor:
      create: false

    lineage:
      create: false

    dataCatalog:
      resources:
        requests:
          memory: "1Gi"
          cpu: "1"
        limits:
          memory: "6Gi"
          cpu: "1200m"
      autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 5
        averageValue: 250
        targetCPUUtilizationPercentage: 75
        scaleDownPolicy:
          stabilizationWindowSeconds: 900
          periodSeconds: 300
          value: 10

    dataCatalogConsumer:
      create: true
      prefetchCount: 40
      terminationGracePeriodSeconds: 120
      appTerminationGracePeriodSeconds: "115"
      graceComplete:
        enabled: false
        countThreshold: 50
        pctThreshold: 0.99
      resources:
        requests:
          memory: "1Gi"
          cpu: "750m"
        limits:
          memory: "4Gi"
          cpu: "1200m"
      autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 5
        averageValue: 250
        scaleDownPolicy:
          stabilizationWindowSeconds: 900
          periodSeconds: 300
          value: 10

  ## Affinity Settings
  # This value defines the affinity for scanner and correlator pods.
  # It defaults (antiAffinity) to allow only a single pod on each node,
  corrAffinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - bigid-corr-new
        topologyKey: kubernetes.io/hostname
  scannerAffinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - bigid-scanner
        topologyKey: kubernetes.io/hostname

## Bitnami RabbitMQ
rabbitmq:
  ## Enable Internal Bitnami RabbitMQ
  enabled: true
  fullnameOverride: bigid-mq
  replicaCount: 1
  auth:
    username: bigid
    password: password
  persistence:
    enabled: false
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 8Gi
  image:
    repository: bitnami/rabbitmq
    tag: 3.12.12
  podLabels: {}
  exporter:
    image:
      repository: "rabbitmq-exporter"
      tag: "1.0.0-RC19"
    additionalLabels:
      app: bigid-mq-exporter
    podLabels:
      app: bigid-mq-exporter
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9419"
  statefulsetLabels:
    app: bigid-mq
  ## RabbitMQ containers' Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  containerSecurityContext: {}

  ## RabbitMQ pods ServiceAccount
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001

  serviceAccount:
    create: true
    name: ""

  metrics:
    enabled: false
    serviceMonitor:
      enabled: false
      namespace: monitoring
  resources:
    limits:
      cpu: 3000m
      memory: 7Gi
    requests:
      cpu: 500m
      memory: 500Mi
  ingress:
    enabled: false
    path: /
    pathType: ImplementationSpecific
    hostname:
    annotations: {}
    ingressClassName: ""
  ## Memory threshold under which RabbitMQ will stop reading from client network sockets
  ## ref: https://www.rabbitmq.com/alarms.html
  ## ref: https://www.rabbitmq.com/memory.html#threshold
  memoryHighWatermark:
    enabled: true ## Enable configuring Memory high watermark
    type: "relative"
    ## Memory high watermark value (default: 0.4 for 40% of available RAM)
    ## Note: Use an absolute value (e.g., 256MB) or relative to resource.limits.memory
    value: 0.85

  ## External RabbitMQ connection string details
  externalRabbitmq:
    enabled: false
    hostname: ""
    port: ""
    auth:
      username: ""
      password: ""

# Bitnami MongoDB
mongodb:
  # @mongodb.externalMongo - All configuration related to external mongodb instance
  externalMongo:
    enabled: false
    port: 27017
    ## MongoDB Auth
    auth:
      username: bigid
      password: password
    # MongoDB custom URI prefix
    uriPrefix: "mongodb"
    # MongoDB custom URI
    uri: "bigid-server?authSource=admin&replicaSet=bigid-replica-set"
    # MongoDB IP Address, if you use SSL externalIP value should be FQDN
    externalIP: ""

    # Enable @mongodb.externalMongo.existingAuthSecret to use pre-created MongoDB authentication secret
    # When enabled a secret named 'mongodb-base-configuration' needs to be created before Helm installation
    # with the following environment variables:
    # - MONGO_EXTERNAL_FULL_URL
    # - BIGID_MONGO_HOST_EXT
    # - BIGID_MONGO_USER
    # - BIGID_MONGO_PWD
    existingAuthSecret:
      enabled: false

    ## Connect to MongoDB via Kerberos
    # kerberos: true
    # mongoKRBconf: "-Djava.security.krb5.conf=/etc/kerberos/krb5.conf"
    # mongoKRBrealm: "-Djava.security.krb5.realm=BIGID.COM"
    # mongoKRBkdc: "-Djava.security.krb5.kdc=kerberos.bigid.com"
    # mongoKRBauth: "-Djavax.security.auth.useSubjectCredsOnly=false"
    # mongoKRBlogin: "-Djava.security.auth.login.config=/etc/gss/jaas.conf"

    ## Enable to use existing secrets for krb5.conf and keytab files via @param global.extraVolumes and global.extraVolumeMounts
    existingKrbSecret: false

    ## Enable @mongodb.externalMongo.existingSslSecrets to use pre-created MongoDB SSL secrets
    ## When enabled, the following secrets should be created before installation:
    ## - bigid-mongodb-ca: Contains client.cert, client.key, and ca.cert
    ## - mongo-ssl-truststore-secrets: Contains truststore.jks and client.jks
    existingSslSecrets:
      enabled: false

    ## Connect to MongoDB via SSL, read BigID documentation https://www.docs.bigid.com/docs/mongodb-with-ssl
    # mongoSSL: true
    # mongoSSLDisableHostnameVerification: true
    # mongoSSLCAPath: "/etc/ssl/bigid/ca.cert"
    # javaSSLTrustStore: "-Djavax.net.ssl.trustStore=/etc/ssl/bigid/truststore.jks"
    # javaSSLTrustStorePassword: "-Djavax.net.ssl.trustStorePassword=password1"
    # mongoX509: false

    ## Connecting to MongoDB SSL Instance with Client Certificate Validation
    # mongoSSLClientCertPath: "/etc/ssl/bigid/client.cert"
    # mongoSSLClientKeyPath: "/etc/ssl/bigid/client.key"
    # javaSSLKeyStore: "-Djavax.net.ssl.keyStore=/etc/ssl/bigid/client.jks"
    # javaSSLKeyStorePassword: "-Djavax.net.ssl.keyStorePassword=password1"

    # To provide a full connection string, uncomment the line below and fill the full connection string in the standard format
    # fullUrl: "mongodb://<username>:<password>@<host>:<port>/<database>?<options>"

  ## Enable Internal Bitnami MongoDB
  enabled: false
  architecture: replicaset
  fullnameOverride: bigid-mongodb
  commonLabels:
    app: bigid-mongodb
  replicaCount: 1
  nodeSelector: {}
  persistence:
    enabled: false
  hidden:
    persistence:
      enabled: false
  arbiter:
    enabled: false
  podLabels: {}
  metrics:
    enabled: false
    serviceMonitor:
      enabled: false
      namespace: monitoring
  service:
    ports:
      mongodb: 27017

  # Override default liveness/readiness probe for MongoDB(&reg;) containers
  livenessProbe:
    enabled: true
  readinessProbe:
    enabled: true
  image:
    registry: docker.io
    repository: bitnami/mongodb
    tag: 6.0.13
  auth:
    rootUser: bigid
    rootPassword: password
  tls:
    enabled: false
    autoGenerated: false
    existingSecret: "bigid-mongodb-ca"
  replicaSetName: bigid-replica-set

# Bitnami Redis
redis:
  ## Enable Internal Bitnami Redis
  enabled: true
  fullnameOverride: bigid-cache
  serviceAccount:
    ## @param serviceAccount.create Specifies whether a ServiceAccount should be created
    ##
    create: true
  commonLabels:
    app: bigid-cache
  ## For Redis Sentinal enabled, configure replication
  architecture: standalone # replication
  replica:
    replicaCount: 3
    persistence:
      enabled: false
    ## Configure Redis Pods Security Context
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    ## Configure Redis Container Security Context
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    resources:
      requests:
        memory: 512Mi
        cpu: 250m
      limits:
        memory: 2Gi
        cpu: 4
  master:
    count: 1
    persistence:
      enabled: false
    podLabels: {}
    livenessProbe:
      initialDelaySeconds: 45
      timeoutSeconds: 20
    resources:
      requests:
        memory: 512Mi
        cpu: 250m
      limits:
        memory: 2Gi
        cpu: 4
    ## Configure Container Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    ## Configure Pods Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param master.podSecurityContext.enabled Enabled Redis&reg; master pods' Security Context
    podSecurityContext:
      enabled: true
      fsGroup: 1001
  image:
    repository: bitnami/redis
    tag: 7.2.4
  auth:
    enabled: true
    password: "password"
  metrics:
    enabled: false
    serviceMonitor:
      enabled: false
      namespace: monitoring
  sentinel:
    enabled: false
    masterSet: bigid-master
    livenessProbe:
      initialDelaySeconds: 45
      timeoutSeconds: 60

 ## External Redis Connection string Details
  externalRedis:
    enabled: false
    hostname: ""
    port: ""
    password: ""

# Bitnami ES
elasticsearch:
  enabled: false
  ## When External Elasticsearch used, disable @param elasticsearch.enabled and set the fullUrl,user,elasticPassword.
  fullUrl: "https://bigid-elasticsearch:9200"
  tenantId: "mdsearch"
  port:
    transport: 9300
    http: 9200

  ## X-Pack security parameters
  ## Note: TLS configuration is required to configure password authentication
  security:
    enabled: true
    user: "elastic"
    elasticPassword: "password"
    tls:
      ## @param security.tls.restEncryption Enable SSL/TLS encryption for Elasticsearch REST API.
      restEncryption: true
  image:
    repository: bitnami/elasticsearch
    tag: 7.17.16
  ## Kernel settings modifier image
  sysctlImage:
    ## @param sysctlImage.enabled Enable kernel settings modifier image
    enabled: true
    registry: docker.io
    repository: bitnami/os-shell
    tag: 11-debian-11
  data:
    ## @param data.replicaCount Number of data-only replicas to deploy
    replicaCount: 2
    fullnameOverride: "bigid-elasticsearch-data"
    ## @param data.servicenameOverride String to fully override elasticsearch.data.servicename
    servicenameOverride: "bigid-elasticsearch-data"
    ## @param data.nodeSelector Node labels for data pods assignment
    ## ref: https://kubernetes.io/docs/user-guide/node-selection/
    nodeSelector: {}
    resources:
      limits:
        cpu: 4
        memory: 24Gi
      requests:
        cpu: 1
        memory: 8Gi
    persistence:
      enabled: false
      storageClass: ""
      size: 50Gi
    ## Configure Pods Security Context
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    ## Configure Container Security Context
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsNonRoot: true
  master:
    ## @param master.masterOnly Deploy the Elasticsearch master-eligible nodes as master-only nodes. Recommended for high-demand deployments.
    ## If you are
    masterOnly: true
    ## @param master.replicaCount Number of master-eligible replicas to deploy
    replicaCount: 1
    ## @param master.nodeSelector Node labels for master-elegible pods assignment
    nodeSelector: {}
    resources:
      limits:
        cpu: 4
        memory: 16Gi
      requests:
        cpu: 1
        memory: 4Gi
    fullnameOverride: "bigid-elasticsearch"
    servicenameOverride: "bigid-elasticsearch"
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    ## Configure Container Security Context
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsNonRoot: true
    persistence:
      ## @param master.persistence.enabled Enable persistence using a `PersistentVolumeClaim`
      enabled: false
      storageClass: ""

## BigID External Apps.
external-apps:
  ropa:
    enabled: false
  pia:
    enabled: false
  risk-tagger:
    enabled: false
  classifier-helper:
    enabled: false
    replicaCount: 1
  aws-discovery:
    enabled: false
  azure-discovery:
    enabled: false
  gcp-discovery:
    enabled: false
  remediation:
    enabled: false
  retention:
    enabled: false
  actions:
    enabled: false
  alation:
    enabled: false
  collibra:
    enabled: false
  jira:
    enabled: false

{{- if .Values.global.bigid.tenantService.create -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "tenant-service.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "tenant-service.labels" . | nindent 4 }}
  annotations:
    {{ include "global.skipCheckovAnnotations" . | nindent 4 }}
    {{- with .Values.global.commonAnnotations }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  replicas: {{ .Values.global.bigid.tenantService.replicaCount }}
  selector:
    matchLabels:
      {{- include "tenant-service.selectorLabels" . | nindent 6 }}
      {{- with .Values.global.podLabels }}
        {{- toYaml . | nindent 6 }}
      {{- end }}
  {{- if .Values.global.bigid.tenantService.updateStrategy }}
  strategy: {{- toYaml .Values.global.bigid.tenantService.updateStrategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      {{- with .Values.global.bigid.tenantService.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.podAnnotations }}
      {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "tenant-service.selectorLabels" . | nindent 8 }}
    spec:
      imagePullSecrets:
      {{- range .Values.global.imagePullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- if .Values.global.bigid.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.global.bigid.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "tenant-service.serviceAccountName" . }}
      automountServiceAccountToken: false
      initContainers:
        - name: init-mq
          image: {{ template "initContainer.image" . }}
          command: ['sh', '-c', 'until nc -zv $(BIGID_MQ_HOST_EXT) $(BIGID_MQ_PORT) -w1; do echo waiting for mq; sleep 3; done;']
          envFrom:
          - configMapRef:
              name: global-configuration
          resources:
            {{- toYaml .Values.global.initContainers.resources | nindent 12}}
        - name: init-config-service
          image: {{ template "initContainer.image" . }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          command: ['sh', '-c', "until wget -q --spider http://bigid-config-service:{{ .Values.global.bigid.configService.port }}/actuator/health; do echo waiting for bigid-config-service; sleep 3; done"]
          resources:
            {{- toYaml .Values.global.initContainers.resources | nindent 12 }}
        - name: init-redis
          image: {{ template "initContainer.image" . }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          command: ['sh', '-c', "until nc -zv -w1 $(BIGID_REDIS_HOST) $(BIGID_REDIS_PORT); do echo waiting for bigid-cache; sleep 3; done"]
          envFrom:
          - configMapRef:
              name: global-configuration
          resources:
            {{- toYaml .Values.global.initContainers.resources | nindent 12 }}
        - name: admin-tenant-script
          image: "{{ .Values.global.image.repository }}/cloud/mt-mongo-json-loader{{ template "bigid.armRepository" . }}:origin"
          command: [ "python", "create-admin-tenant/create_admin_tenant.py" ]
          envFrom:
            - secretRef:
                name: mongodb-base-configuration
          env:
            - name: NAMESPACE
              value: {{ .Release.Namespace | quote }}
            - name: MONGO_EXTERNAL_FULL_URL
              value: "mongodb://$(BIGID_MONGO_USER):$(BIGID_MONGO_PWD)@$(BIGID_MONGO_HOST_EXT):$(BIGID_MONGO_PORT)/{{ .Values.global.bigid.tenantService.mongodb.dbName }}{{ .Values.global.bigid.tenantService.mongodb.mongoUri }}&ssl=$(BIGID_MONGO_SSL)"
            - name: ADMIN_TENANT_DB_NAME
              value: "{{ trunc 32 .Release.Namespace }}-{{ .Values.global.bigid.tenantService.mongodb.adminTenantId }}-{{ .Values.global.bigid.tenantService.mongodb.bigidDbName }}"
          resources:
            {{- toYaml .Values.global.initContainers.resources | nindent 12 }}
      containers:
      - name: {{ .Chart.Name }}
        {{- if .Values.global.bigid.containerSecurityContext.enabled }}
        securityContext: {{- omit .Values.global.bigid.containerSecurityContext "enabled" | toYaml | nindent 10 }}
        {{- end }}
        image: "{{ .Values.global.image.repository }}/{{.Values.global.bigid.tenantService.image.repository }}{{ template "bigid.armRepository" . }}:{{ .Values.global.image.tag }}"
        imagePullPolicy: {{ .Values.global.image.pullPolicy }}
        ports:
          - name: http
            containerPort: {{ .Values.global.bigid.tenantService.service.port }}
            protocol: TCP
        {{- if .Values.global.bigid.tenantService.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: {{ .Values.global.bigid.tenantService.livenessProbe.path }}
            port: {{ .Values.global.bigid.tenantService.service.port }}
            scheme: HTTP
          initialDelaySeconds: {{ .Values.global.bigid.tenantService.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.global.bigid.tenantService.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.global.bigid.tenantService.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.global.bigid.tenantService.livenessProbe.failureThreshold }}
          successThreshold: {{ .Values.global.bigid.tenantService.livenessProbe.successThreshold }}
        {{- end }}
        {{- if .Values.global.bigid.tenantService.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: {{ .Values.global.bigid.tenantService.readinessProbe.path }}
            port: {{ .Values.global.bigid.tenantService.service.port }}
            scheme: HTTP
          initialDelaySeconds: {{ .Values.global.bigid.tenantService.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.global.bigid.tenantService.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.global.bigid.tenantService.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.global.bigid.tenantService.readinessProbe.failureThreshold }}
          successThreshold: {{ .Values.global.bigid.tenantService.readinessProbe.successThreshold }}
        {{- end }}
        envFrom:
        - secretRef:
            name: mongodb-base-configuration
        - configMapRef:
            name: mongodb-node-configuration
        - configMapRef:
            name: global-configuration
        - configMapRef:
            name: apm-configuration
        {{- if .Values.global.extraEnvVarsCM }}
        - configMapRef:
            name: {{ .Values.global.extraEnvVarsCM }}
        {{- end }}
        {{- if .Values.global.extraEnvVarsSecret }}
        - secretRef:
            name: {{ .Values.global.extraEnvVarsSecret }}
        {{- end }}
        env:
          - name: SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: {{ template "bigid.secretKey" . }}
                key: secretKey
          - name: SECRET_SALT
            valueFrom:
              secretKeyRef:
                name: secret-key
                key: secretSalt
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: bigid-auth-secret
                key: redis-pass
          - name: DL_STREAM_NAME
            value: "{{ .Values.global.bigid.dataLakeClient.dlStreamName }}"
          - name: USE_SAAS
            value: "{{ .Values.global.bigid.useSaas.enabled }}"
          - name: SAAS_ENV
            value: "{{ .Values.global.bigid.saasEnv }}"
          - name: COMPANY_NAME
            value: "{{ .Values.global.bigid.companyName }}"
          - name: MONGO_EXTERNAL_FULL_URL
            value: 'mongodb://$(BIGID_MONGO_USER):$(BIGID_MONGO_PWD)@$(BIGID_MONGO_HOST_EXT):$(BIGID_MONGO_PORT)/{{ .Values.global.bigid.tenantService.mongodb.dbName }}{{ .Values.global.bigid.tenantService.mongodb.mongoUri }}&ssl=$(BIGID_MONGO_SSL)'
          - name: SCALABLE_HEALTH_CHECK_ENABLED
            value: "{{ .Values.global.bigid.scalableHealthCheck.enabled }}"
          - name: SHOULD_GENERATE_AND_STORE_TENANT_SECRET_IN_SECRETS_MANAGER
            value: "{{ .Values.global.bigid.tenantService.generateAndStoreSecretsInSecretsManager.enabled }}"
          - name: SHOULD_PUBLISH_MIGRATION_REQUEST_TO_PORTAL
            value: "{{ .Values.global.bigid.tenantService.shouldPublishMigrationRequestToPortal.enabled }}"
          - name: SHOULD_GENERATE_AND_USE_ELASTIC_SEARCH_CREDS
            value: "{{ .Values.global.bigid.tenantService.generateAndUseElasticSearchCreds.enabled }}"
          - name: AWS_SECRETS_MANAGER_REGION
            value: "{{ .Values.global.bigid.tenantService.awsSecretsManager.region }}"
          - name: BIGID_ELASTICSEARCH_USER
            valueFrom:
              secretKeyRef:
                name: bigid-auth-secret
                key: BIGID_ELASTICSEARCH_USER
          - name: BIGID_ELASTICSEARCH_PWD
            valueFrom:
              secretKeyRef:
                name: bigid-auth-secret
                key: BIGID_ELASTICSEARCH_PWD
          - name: BIGID_ELASTICSEARCH_ROOT_USER
            valueFrom:
              secretKeyRef:
                name: bigid-auth-secret
                key: BIGID_ELASTICSEARCH_USER
          - name: BIGID_ELASTICSEARCH_ROOT_PWD
            valueFrom:
              secretKeyRef:
                name: bigid-auth-secret
                key: BIGID_ELASTICSEARCH_PWD
          - name: BIGID_TENANT_ID
            valueFrom:
              configMapKeyRef:
                name: global-configuration
                key: BIGID_ELASTICSEARCH_TENANT_ID
          - name: BIGID_ELASTICSEARCH_EXTERNAL_FULL_URL
            value: "$(BIGID_ELASTICSEARCH_HOST_EXT):$(BIGID_ELASTICSEARCH_PORT_EXT)"
          - name: ATLAS_API_SECRET_NAME
            value: "{{ .Values.global.bigid.tenantService.atlasApiSecretName }}"
          - name: MULTI_TENANT_CONFIG_ENABLED
            value: {{ .Values.global.bigid.configService.multiTenantConfigEnabled | quote }}
          - name: DISABLE_SERVICES_LOGS
            value: {{ .Values.global.bigid.shouldDisableLogs | quote }}
          - name: SHOULD_GENERATE_AND_STORE_MONGO_CREDS_FF
            value: {{ .Values.global.bigid.multiTenantMode.generateAndUseMongoCreds | quote }}
          {{- if .Values.global.extraEnvVars }}
          {{- .Values.global.extraEnvVars | toYaml | nindent 10 }}
          {{- end }}
          {{- with .Values.global.bigid.tenantService.extraEnvVars }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
        resources:
          {{- toYaml .Values.global.bigid.tenantService.resources | nindent 10 }}
        volumeMounts:
          - name: bigid-mongodb-ca
            mountPath: /etc/ssl/bigid
            readOnly: true
      volumes:
        - name: bigid-mongodb-ca
          secret:
            secretName: bigid-mongodb-ca
            defaultMode: 420
      {{- with .Values.global.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}

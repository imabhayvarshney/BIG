{{- if .Values.global.bigid.clustering.create -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bigid-ml-gw
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app: bigid-ml-gw
    {{- with .Values.global.additionalLabels }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
    {{- include "clustering.labels" . | nindent 4 }}
  annotations:
    {{ include "global.skipCheckovAnnotations" . | nindent 4 }}
    {{- with .Values.global.commonAnnotations }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  replicas: {{ .Values.global.bigid.clustering.gateway.replicaCount }}
  selector:
    matchLabels:
      app: bigid-ml-gw
      {{- with .Values.global.podLabels }}
        {{- toYaml . | nindent 6 }}
      {{- end }}
  {{- if .Values.updateStrategy }}
  strategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      annotations:
      {{- with .Values.global.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.bigid.clustering.gateway.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app: bigid-ml-gw
        {{- with .Values.global.podLabels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- if and (.Values.global.apm.enabled) (eq .Values.global.apm.type "datadog") }}
        tags.datadoghq.com/bigid-ml.env: {{ .Release.Namespace }}
        tags.datadoghq.com/bigid-ml.service: bigid-ml
        tags.datadoghq.com/service: "bigid-ml"
        tags.datadoghq.com/version: "{{ .Values.global.image.tag | trunc 63 }}"
      {{- end }}
    spec:
      serviceAccount: bigid-clustering
      automountServiceAccountToken: false
      initContainers:
      - name: init-config-service
        image: {{ template "initContainer.image" . }}
        imagePullPolicy: {{ .Values.global.image.pullPolicy }}
        command: ['sh', '-c', "until wget -q --spider http://bigid-config-service:{{ .Values.global.bigid.configService.port }}/actuator/health; do echo waiting for bigid-config-service; sleep 3; done"]
        resources:
          {{- toYaml .Values.global.initContainers.resources | nindent 10 }}
        {{- if .Values.global.initContainers.containerSecurityContext.enabled }}
        securityContext: {{- omit .Values.global.initContainers.containerSecurityContext "enabled" | toYaml | nindent 10 }}
        {{- end }}
      containers:
      - name: bigid-ml-gw
        image: "{{ .Values.global.image.repository }}/{{.Values.global.bigid.clustering.image.repository }}{{ template "bigid.armRepository" . }}:{{ .Values.global.image.tag }}"
        {{- if .Values.global.bigid.containerSecurityContext.enabled }}
        securityContext: {{- omit .Values.global.bigid.containerSecurityContext "enabled" | toYaml | nindent 10 }}
        {{- end }}
        imagePullPolicy: {{ .Values.global.image.pullPolicy }}
        command: ["/cluster_package/clustering-boot.sh"]
        args: ["-r", "SERVER"]
        ports:
        - containerPort: {{ .Values.global.bigid.clustering.gateway.port }}
        tty: true
        volumeMounts:
        - name: bigid-mongodb-ca
          mountPath: /etc/ssl/bigid
          readOnly: true
        - name: mongo-kerberos-secrets
          mountPath: /etc/kerberos
          readOnly: true
        {{- with .Values.global.extraVolumeMounts }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        envFrom:
        - secretRef:
            name: mongodb-base-configuration
        - configMapRef:
            name: mongodb-node-configuration
        - configMapRef:
            name: global-configuration
        - configMapRef:
            name: apm-configuration
        {{- if .Values.global.extraEnvVarsCM }}
        - configMapRef:
            name: {{ .Values.global.extraEnvVarsCM }}
        {{- end }}
        {{- if .Values.global.extraEnvVarsSecret }}
        - secretRef:
            name: {{ .Values.global.extraEnvVarsSecret }}
        {{- end }}
        env:
        {{- with .Values.global.extraEnvVars }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.global.bigid.clustering.gateway.extraEnvVars }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if and (.Values.global.apm.enabled) (eq .Values.global.apm.type "datadog") }}
        - name: DD_AGENT_HOST
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        - name: DD_ENV
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['tags.datadoghq.com/bigid-ml.env']
        - name: DD_SERVICE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['tags.datadoghq.com/bigid-ml.service']
        {{- end }}
        - name: BIGID_DATE
          value: {{ now.UTC.Format "2006-01-02" | replace "-" "." | quote }}
        - name: DISABLE_SERVICES_LOGS
          value: {{ .Values.global.bigid.shouldDisableLogs | quote }}
        - name: BIGID_UI_PORT_EXT
          value: "{{ .Values.global.bigid.web.port }}"
        - name: IS_FIPS_MODE
          value: {{ .Values.global.fips.enabled | quote }}
        - name: BIGID_UI_PROTOCOL_EXT
          value: "http"
        - name: BIGID_UI_HOST_EXT
          value: "bigid-web"
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "bigid.secretKey" . }}
              key: secretKey
        - name: SECRET_SALT
          valueFrom:
            secretKeyRef:
              name: secret-key
              key: secretSalt
        - name: PAYLOAD_ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: payload-enc-key
              key: payloadEncKey
        - name: HOTSPOTS_ENABLED
          value: {{ .Values.global.bigid.clustering.hotspots.create | quote }}
        - name: CELERY_CONTROL_DISABLED
          value: "{{ .Values.global.bigid.clustering.celeryControlDisabled }}"
        resources:
          {{- toYaml .Values.global.bigid.clustering.gateway.resources | nindent 10 }}
        readinessProbe:
          httpGet:
            path: /api/v1/clusters/liveness-check
            port: {{ .Values.global.bigid.clustering.gateway.port }}
          initialDelaySeconds: 60
          periodSeconds: 20
        livenessProbe:
          httpGet:
            path: /api/v1/clusters/liveness-check
            port: {{ .Values.global.bigid.clustering.gateway.port }}
          initialDelaySeconds: 60
          periodSeconds: 20
      volumes:
      - name: bigid-mongodb-ca
        secret:
          secretName: bigid-mongodb-ca
          defaultMode: 420
      - name: mongo-kerberos-secrets
        secret:
          secretName: mongo-kerberos-secrets
          defaultMode: 420
      {{- with .Values.global.extraVolumes }}
        {{- toYaml . | nindent 6 }}
      {{- end }}
      imagePullSecrets:
      {{- range .Values.global.imagePullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- if .Values.global.bigid.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.global.bigid.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      restartPolicy: Always
      {{- with .Values.global.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}

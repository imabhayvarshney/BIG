apiVersion: apps/v1
kind: Deployment
metadata:
  name: bigid-web
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app: bigid-web
    {{- with .Values.global.additionalLabels }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
    {{- include "web.labels" . | nindent 4 }}
  annotations:
    {{ include "global.skipCheckovAnnotations" . | nindent 4 }}
    {{- with .Values.global.commonAnnotations }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  replicas: {{ .Values.global.bigid.web.replicaCount }}
  selector:
    matchLabels:
      app: bigid-web
      {{- with .Values.global.podLabels }}
        {{- toYaml . | nindent 6 }}
      {{- end }}
  {{- if .Values.updateStrategy }}
  strategy: {{- toYaml .Values.global.bigid.web.updateStrategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      annotations:
      {{- with .Values.global.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.bigid.web.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app: bigid-web
        {{- with .Values.global.podLabels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- if and (.Values.global.apm.enabled) (eq .Values.global.apm.type "datadog") }}
        tags.datadoghq.com/bigid-web.env: {{ .Release.Namespace }}
        tags.datadoghq.com/bigid-web.service: bigid-web
        tags.datadoghq.com/service: "bigid-web"
        tags.datadoghq.com/version: "{{ .Values.global.image.tag | trunc 63 }}"
      {{- end }}
    spec:
      serviceAccount: bigid-web
      automountServiceAccountToken: false
      initContainers:
      - name: init-config-service
        image: {{ template "initContainer.image" . }}
        imagePullPolicy: {{ .Values.global.image.pullPolicy }}
        command: ['sh', '-c', "until wget -q --spider http://bigid-config-service:{{ .Values.global.bigid.configService.port }}/actuator/health; do echo waiting for bigid-config-service; sleep 3; done"]
        resources:
          {{- toYaml .Values.global.initContainers.resources | nindent 10 }}
        {{- if .Values.global.initContainers.containerSecurityContext.enabled }}
        securityContext: {{- omit .Values.global.initContainers.containerSecurityContext "enabled" | toYaml | nindent 10 }}
        {{- end }}
      - name: init-redis
        image: {{ template "initContainer.image" . }}
        imagePullPolicy: {{ .Values.global.image.pullPolicy }}
        command: ['sh', '-c', "until nc -zv -w1 $(BIGID_REDIS_HOST) $(BIGID_REDIS_PORT); do echo waiting for bigid-cache; sleep 3; done"]
        resources:
          {{- toYaml .Values.global.initContainers.resources | nindent 10 }}
        {{- if .Values.global.initContainers.containerSecurityContext.enabled }}
        securityContext: {{- omit .Values.global.initContainers.containerSecurityContext "enabled" | toYaml | nindent 10 }}
        {{- end }}
        envFrom:
        - configMapRef:
            name: global-configuration
      {{- if .Values.global.bigid.tenantService.create }}
      - name: init-tenant-service
        image: {{ template "initContainer.image" . }}
        imagePullPolicy: {{ .Values.global.image.pullPolicy }}
        command: [ 'sh', '-c', "until wget -q --spider http://bigid-tenant-service:{{ .Values.global.bigid.tenantService.port }}/api/v1/tenant-service/health; do echo waiting for bigid-tenant-service; sleep 3; done" ]
        resources:
          {{- toYaml .Values.global.initContainers.resources | nindent 10 }}
        {{- if .Values.global.initContainers.containerSecurityContext.enabled }}
        securityContext: {{- omit .Values.global.initContainers.containerSecurityContext "enabled" | toYaml | nindent 10 }}
        {{- end }}
      {{- end }}
      containers:
      - name: bigid-web
        image: "{{ .Values.global.image.repository }}/{{.Values.global.bigid.web.image.repository }}{{ template "bigid.armRepository" . }}:{{ .Values.global.image.tag }}"
        {{- if .Values.global.bigid.containerSecurityContext.enabled }}
        securityContext: {{- omit .Values.global.bigid.containerSecurityContext "enabled" | toYaml | nindent 10 }}
        {{- end }}
        imagePullPolicy: {{ .Values.global.image.pullPolicy }}
        {{- if .Values.global.bigid.web.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: {{ .Values.global.bigid.web.livenessProbe.path }}
            port: {{ .Values.global.bigid.web.livenessProbe.port }}
          initialDelaySeconds: {{ .Values.global.bigid.web.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.global.bigid.web.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.global.bigid.web.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.global.bigid.web.livenessProbe.failureThreshold }}
          successThreshold: {{ .Values.global.bigid.web.livenessProbe.successThreshold }}
        {{- end }}
        {{- if .Values.global.bigid.web.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: {{ .Values.global.bigid.web.readinessProbe.path }}
            port: {{ .Values.global.bigid.web.readinessProbe.port }}
          initialDelaySeconds: {{ .Values.global.bigid.web.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.global.bigid.web.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.global.bigid.web.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.global.bigid.web.readinessProbe.failureThreshold }}
          successThreshold: {{ .Values.global.bigid.web.readinessProbe.successThreshold }}
        {{- end }}
        ports:
         - containerPort: {{ .Values.global.bigid.web.port }}
        resources:
          {{- toYaml .Values.global.bigid.web.resources | nindent 10 }}
        envFrom:
        - secretRef:
            name: mongodb-base-configuration
        - configMapRef:
            name: mongodb-node-configuration
        - configMapRef:
            name: global-configuration
        - configMapRef:
            name: apm-configuration
        {{- if .Values.global.extraEnvVarsCM }}
        - configMapRef:
            name: {{ .Values.global.extraEnvVarsCM }}
        {{- end }}
        {{- if .Values.global.extraEnvVarsSecret }}
        - secretRef:
            name: {{ .Values.global.extraEnvVarsSecret }}
        {{- end }}
        env:
        {{- with .Values.global.extraEnvVars }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.global.bigid.web.extraEnvVars }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if and (.Values.global.apm.enabled) (eq .Values.global.apm.type "datadog") }}
        - name: DD_AGENT_HOST
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        - name: DD_ENV
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['tags.datadoghq.com/bigid-web.env']
        - name: DD_SERVICE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['tags.datadoghq.com/bigid-web.service']
        {{- end }}
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "bigid.secretKey" . }}
              key: secretKey
        - name: SECRET_SALT
          valueFrom:
            secretKeyRef:
              name: secret-key
              key: secretSalt
        - name: AUTH_SECRET_KEY
          value: {{ .Values.global.authKey | quote }}
        - name: OKTA_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: secret-key
              key: okta-token
        - name: DL_STREAM_NAME
          value: "{{ .Values.global.bigid.dataLakeClient.dlStreamName }}"
        - name: ENABLE_DATALAKE_CLIENT
          value: "{{ .Values.global.bigid.dataLakeClient.enabled }}"
        - name: USE_SAAS
          value: "{{ .Values.global.bigid.useSaas.enabled }}"
        - name: SAAS_ENV
          value: "{{ .Values.global.bigid.saasEnv }}"
        - name: COMPANY_NAME
          value: "{{ .Values.global.bigid.companyName }}"
        - name: AUTH0_DOMAIN
          value: "{{ .Values.global.bigid.web.auth0Domain }}"
        - name: AUTH0_CLOUD_HOST_DOMAIN
          value: "{{ .Values.global.bigid.web.auth0CloudHostDomain }}"
        - name: AUTH0_CUSTOM_DOMAIN
          value: "{{ .Values.global.bigid.web.auth0CustomDomain }}"
        - name: AUTH0_CLOUD_TEST_MODE
          value: "{{ .Values.global.bigid.web.auth0CloudTestMode }}"
        - name: AUTH0_DB_CONNECTION_NAME
          value: "{{ .Values.global.bigid.web.auth0DBConnectionName }}"
        - name: AUTH0_CLOUD_CLIENT_SECRET
          value: "{{ .Values.global.bigid.web.auth0CloudClientSecret }}"
        - name: AUTH0_CLOUD_CLIENT_ID
          value: "{{ .Values.global.bigid.web.auth0CloudClientId }}"
        - name: IS_SMALL_ID
          value: "{{ .Values.global.bigid.web.isSmallId }}"
        - name: ENABLE_CLOUD_MERGER
          value: "{{ .Values.global.bigid.web.enableCloudMerger }}"
        - name: FMSD_ENABLED
          value: "{{ .Values.global.bigid.web.fmsdEnabled }}"
        - name: CLOUD_PORTAL_API_URL
          value: "{{ .Values.global.bigid.web.cloudPortalApiUrl }}"
        - name: ENABLE_CUSTOMER_IDP
          value: "{{ .Values.global.bigid.web.enabledCustomerIdp }}"
        - name: AUTH0_TENANTS_LAMBDA_CLIENT_ID
          value: "{{ .Values.global.bigid.web.auth0TenantLambdaClientId }}"
        - name: AUTH0_REDIRECT_PROTOCOL
          value: "{{ .Values.global.bigid.web.auth0RedirectProtocol }}"
        - name: AUTH0_TOKEN_CLAIMS_NAMESPACE
          value: "{{ .Values.global.bigid.web.Auth0TokenClaimsNamespace }}"
        - name: AUTH0_APP_NAME_ATTR_IN_TOKEN_CLAIMS
          value: "{{ .Values.global.bigid.web.Auth0AppNameAttrInTokenClaims }}"
        - name: SAVE_SCANNER_LOGS_IN_DB_ENABLED
          value: {{ .Values.global.bigid.saveScannerLogsInDbEnabled | quote }}
        - name: TENANT_DOMAIN_REGEX
          value: {{ .Values.global.bigid.multiTenantMode.tenantDomainRegex | quote }}
        - name: IDP_TYPE
          value: "{{ .Values.global.bigid.web.idpType }}"
        - name: IS_FIPS_MODE
          value: {{ .Values.global.fips.enabled | quote }}
        - name: OKTA_DOMAIN
          value: "{{ .Values.global.bigid.web.domain }}"
        - name: OKTA_MAX_USERS
          value: "{{ .Values.global.bigid.web.maxUsers }}"
        - name: OKTA_APPLICATION
          value: "{{ .Values.global.bigid.web.okta_app_id }}"
        - name: LABELER_ENABLED
          value: "{{ .Values.global.bigid.labeler.create }}"
        - name: ENABLE_LINEAGE
          value: "{{ .Values.global.bigid.lineage.create }}"
        - name: ENABLE_REPORTING_ETL
          value: "{{ .Values.global.bigid.reportingEtl.create }}"
        - name: ENABLE_TENANT_SERVICE
          value: "{{ .Values.global.bigid.tenantService.create }}"
        - name: CLUSTERING_ENABLED
          value: "{{ .Values.global.bigid.clustering.create }}"
        - name: ENABLE_ACTION_CENTER
          value: "{{ .Values.global.bigid.actionCenter.create }}"
        - name: ACI_ENABLED
          value: "{{ .Values.global.bigid.aci.create }}"
        - name: CONNECTIVITY_EXPERIENCE_ENABLED
          value: "{{ .Values.global.bigid.connectivityExperienceEnabled }}"
        - name: DS_ONBOARDING_LAYOUT_ENABLED
          value: "{{ .Values.global.bigid.dsOnboardingLayoutEnabled }}"
        - name: NEW_CONNECTION_TAB_ENABLED
          value: "{{ .Values.global.bigid.newConnectionTabEnabled }}"
        - name: DS_COLLABORATION_ENABLED
          value: "{{ .Values.global.bigid.dsCollaborationEnabled }}"
        - name: SUGGESTED_ACTIONS_ENABLED
          value: "{{ .Values.global.bigid.suggestedActionsEnabled }}"
        - name: BIGID_UI_PORT_EXT
          value: "{{ .Values.global.bigid.web.bigidUiPortExt }}"
        - name: AUDIT_FILE_MAX_SIZE
          value: "10m"
      {{- if .Values.global.bigid.web.licenseKey }}
        - name: LICENSE_KEY
          value: "{{ .Values.global.bigid.web.licenseKey }}"
      {{- end }}
        - name: JSON_LOGS_CREATION
          value: "{{ .Values.global.bigid.logConfiguration.jsonLogs.enabled }}"
        - name: AMOUNT_OF_LOGS_FILE
          value: "{{ .Values.global.bigid.logConfiguration.amountOfLogsFile }}"
        - name: PRINT_AUDIT_TO_STDOUT
          value: "{{ .Values.global.bigid.web.printAuditToStdout }}"
        - name: MULTI_TENANT_MODE_ENABLED
          value: "{{ .Values.global.bigid.multiTenantMode.enabled }}"
        - name: DISABLE_LEGACY_ADMIN_ROLES_ACCESS
          value: "{{ .Values.global.bigid.web.legacyAdminRoles }}"
        - name: BIGIDME_AGENT_ENABLED
          value: "{{ .Values.global.bigid.bigidme.create }}"
        - name: WRITE_AUDIT_LOGS_TO_MQ
          value: "{{.Values.global.bigid.web.writeAuditLogsToMq}}"
        - name: RISK_ASSESSMENT_ENABLED
          value: "{{ .Values.global.bigid.riskAssessment.enabled }}"
        - name: SAML_DENY_LOGIN
          value: "{{ .Values.global.bigid.web.samlDenyLogin.enabled }}"
        - name: USE_AUDIT_OBJECT_API
          value: "{{.Values.global.bigid.web.useAuditObjectApi}}"
        - name: BIGID_MQ_USER
          valueFrom:
            secretKeyRef:
              name: bigid-auth-secret
              key: rabbitmq-user
        - name: BIGID_MQ_PWD
          valueFrom:
            secretKeyRef:
              name: bigid-auth-secret
              key: rabbitmq-pass
        - name: BIGID_MQ_PROTOCOL
          value: "amqps://"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: bigid-auth-secret
              key: redis-pass
        {{- if .Values.global.bigid.web.amplitude.enabled }}
        - name: AMPLITUDE_API_KEY
          valueFrom:
            secretKeyRef:
              name: secret-key
              key: amplitude-api-key
        {{- end }}
        - name: PIPE_TO_ORCH2_CONDITIONALLY
          value: "{{ .Values.global.bigid.web.pipeToOrch2Conditionally }}"
        - name: ENFORCE_STRONG_PASSWORD_SECURITY
          value: "{{ .Values.global.bigid.web.enforceStrongPasswordSecurity }}"
        - name: NER_CLASSIFIER_ENABLED_FEATURE_FLAG
          value: "{{ .Values.global.bigid.ner.create }}"
        - name: HOTSPOTS_ENABLED
          value: {{ .Values.global.bigid.clustering.hotspots.create | quote }}
        - name: PAYLOAD_ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: payload-enc-key
              key: payloadEncKey
        - name: NODE_OPTIONS
          value: {{ printf "$(NODE_APM_OPTS) %s" (include "nodeJs.maxOldSpaceSize" .Values.global.bigid.web) | quote }}
        - name: SCALABLE_HEALTH_CHECK_ENABLED
          value: "{{ .Values.global.bigid.scalableHealthCheck.enabled }}"
        - name: CLASSIFIER_TESTER_ENABLED
          value: {{ .Values.global.bigid.classifierTester.enabled | quote }}
        - name: BIGCHAT_FF_ENABLED
          value: {{ .Values.global.bigid.bigchatFFEnabled | quote }}
        - name: VENDORS_DIRECTORY_ENABLED_FF
          value: {{ .Values.global.bigid.vendorsDirectoryEnabledFF | quote }}
        - name: USE_DISPLAY_NAME_FOR_POLICY_FF
          value: {{ .Values.global.bigid.useDisplayNameForPolicyFF | quote }}
        - name: ENABLE_UNIFIED_VAULTS
          value: {{ .Values.global.bigid.enableUnifiedVaults | quote }}
        - name: ENABLE_NEW_UX_NAVIGATION
          value: {{ .Values.global.bigid.web.enableNewUxNavigation | quote }}
        - name: SHOW_GUIDED_TOUR_SCAN_TEMPLATES
          value: {{ .Values.global.bigid.web.showGuidedTourScanTemplatesFF | quote }}
        - name: SHOW_GUIDED_TOUR_CLASSIFICATION_STEP
          value: {{ .Values.global.bigid.web.showGuidedTourClassificationStepFF | quote }}
        - name: SHOW_GUIDED_TOUR_SAVED_SCANS
          value: {{ .Values.global.bigid.web.showGuidedTourSavedScansFF | quote }}
        - name: SHOW_DIALOG_GUIDE_CONVERT_SCAN_PROFILE
          value: {{ .Values.global.bigid.web.showDialogGuideConvertScanProfile | quote }}
        - name: ENABLE_NEW_CERTIFICATES_MANAGEMENT_VIEW_FF
          value: {{ .Values.global.bigid.web.enableNewCertificatesManagementView | quote }}
        - name: USE_SCAN_PAGE_STATE
          value: {{ .Values.global.bigid.useScanPageStateFF | quote }}
        - name: SHOW_NEW_SCAN_INSIGHT
          value: {{ .Values.global.bigid.web.showNewScanInsightFF | quote }}
        - name: ENABLE_SCAN_TEMPLATE
          value: {{ .Values.global.bigid.enableScanTemplateFF | quote }}
        - name: PIPE_SCAN_PARTS_TO_ORCH2
          value: {{ .Values.global.bigid.web.pipeScanPartsToOrch2FF | quote }}
        - name: LOG_LEVEL
          value: {{ .Values.global.bigid.web.logLevel | quote }}
        - name: DISABLE_LEGACY_ACL_FF
          value: {{ .Values.global.bigid.disableLegacyAclFF | quote }}
        - name: DISABLE_SERVICES_LOGS
          value: {{ .Values.global.bigid.shouldDisableLogs | quote }}
        - name: SENSITIVITY_CLASSIFICATION_V2_ENABLED
          value: {{ .Values.global.bigid.sensitivityClassificationV2Enabled | quote }}
        - name: ACI_DASHBOARD_UI_V2_ENABLED
          value: {{ .Values.global.bigid.aciDashboardUiV2Enabled | quote }}
        - name: MT_CORRELATION_FF_ENABLED
          value: "{{ .Values.global.bigid.web.mtCorrelation.enabled }}"
        - name: MULTI_TENANT_CONFIG_ENABLED
          value: {{ .Values.global.bigid.configService.multiTenantConfigEnabled | quote }}
        - name: SHOULD_GENERATE_AND_STORE_MONGO_CREDS_FF
          value: {{ .Values.global.bigid.multiTenantMode.generateAndUseMongoCreds | quote }}
      {{- if .Values.global.bigid.metadataSearch.create }}
        - name: METADATA_SEARCH_ENABLED
          value: "true"
        - name: DATA_OVERVIEW_ENABLED
          value: "true"
      {{- end }}
        - name: CATALOG_HISTORY_ENABLED
          value: {{ .Values.global.bigid.web.enableCatalogHistory | quote }}
        - name: ACTIONABLE_INSIGHTS_ENABLED
          value: {{ .Values.global.bigid.actionableInsights.enabled | quote }}
        - name: SCAN_JOBS_IN_MEMORY_ENABLED
          value: {{ .Values.global.bigid.scanJobsInMemoryEnabled | quote }}
        - name: NEW_SCAN_INSIGHT_FOR_LABELING_ENABLED
          value: {{ .Values.global.bigid.newScanInsightForLabelingEnabled | quote }}
        - name: SMB_V2_ACI_ENABLED
          value: {{ .Values.global.bigid.smbV2AciEnabled | quote }}
        - name: DYNAMIC_MODIFY_SCAN_WINDOW
          value: {{ .Values.global.bigid.dynamicModifyScanWindowFF.enabled | quote }}
        - name: DSAR_USE_CATALOG_COLUMNS_ENABLED_FF
          value: {{ .Values.global.bigid.dsarUseCatalogColumnsEnabled | quote }}
        - name: ACI_SUPPORT_FOR_FOLDERS_ENABLED
          value: {{ .Values.global.bigid.aciSupportForFoldersEnabled | quote }}
        volumeMounts:
        - name: audit-log
          mountPath: /usr/src/app/log
        - name: bigid-mongodb-ca
          mountPath: /etc/ssl/bigid
          readOnly: true
        - name: mongo-kerberos-config-service-secrets
          mountPath: /etc/kerberos
          readOnly: true
        {{- with .Values.global.extraVolumeMounts }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      ## bigid web audit log persistency, you need to create StorageClass, see example https://kubernetes.io/docs/concepts/storage/storage-classes/#introduction
      ## https://kubernetes.io/docs/concepts/storage/persistent-volumes/
      volumes:
      - name: audit-log
        {{- if .Values.global.bigid.web.auditLogPersistency }}
        persistentVolumeClaim:
          claimName: bigid-web-pv-claim
        {{ else }}
        emptyDir: {}
        {{- end }}
      - name: bigid-mongodb-ca
        secret:
          secretName: bigid-mongodb-ca
          defaultMode: 420
      - name: mongo-kerberos-config-service-secrets
        secret:
          secretName: mongo-kerberos-secrets
          defaultMode: 420
      {{- with .Values.global.extraVolumes }}
        {{- toYaml . | nindent 6 }}
      {{- end }}
      imagePullSecrets:
      {{- range .Values.global.imagePullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- if .Values.global.bigid.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.global.bigid.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      restartPolicy: Always
      {{- with .Values.global.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.bigid.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

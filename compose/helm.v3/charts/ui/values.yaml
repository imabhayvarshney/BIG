## @section Global parameters
global:
  # Default node selector for bigid services (except of rmq/mongo/redis)
  nodeSelector: {}
  ## @param affinity Affinity for pod assignment. Evaluated as a template
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}
  ## @param master.tolerations Tolerations for master-elegible pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []
  ## Default podAnnotations for bigid pods (except of rmq/mongo/redis)
  podAnnotations: {}
  bigid:
    ui:
      dynamicModifyParsingThreadsFF: true
      negativeSupportTermFF: true
      classifyFileNamesEnabled: false

      replicaCount: 1
      image:
        repository: "bigid-ui-harden"
      serviceAccount:
        create: true
        annotations: {}
      service:
        # Can be set to ClusterIP, NodePort
        type: ClusterIP
        # Service port will be 80 or 443 (On 443, a self-signed certificate will be used, or override ui.tls)
        # NGINX containerPort will be on unprivileged ports 8080/8443
        port: 80 ## 80,443
        nodePort: 30846
        ## Additional labels.
        additionalLabels: {}
        ## Common labels.
        commonAnnotations: {}
      ## Override BigID UI Certificates (Base64-encoded file)
      ## @param dhParam A base64ed Diffie-Hellman parameter - Optional
      ## This can be generated with openssl
      ## global.bigid.ui.service.port - Must be set to 443!
      tls:
        certFile: ""
        keyFile: ""
        dhParam: ""
      podAnnotations: {}
      updateStrategy:
        type: RollingUpdate
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 0
      enableNewUxNavigation: true
      extraEnvVars: []
      autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 5
        targetCPUUtilizationPercentage: 85
        scaleDownPolicy:
          stabilizationWindowSeconds: 900
          periodSeconds: 300
          value: 10

## @section Generic parameters for BigID UI
imagePullSecrets: []
nameOverride: ""
fullnameOverride: "bigid-ui"

## @section Metrics Parameters

## Prometheus Exporter / Metrics configuration
##
metrics:
  ## @param metrics.enabled Start a sidecar prometheus exporter to expose metrics
  ##
  enabled: false
  ## @param metrics.port NGINX Container Status Port scraped by Prometheus Exporter
  ## Defaults to specified http port
  port: ""
  ## ref: https://hub.docker.com/r/bitnami/nginx-exporter/tags/
  ## @param metrics.image.registry NGINX Prometheus exporter image registry
  ## @param metrics.image.repository NGINX Prometheus exporter image repository
  ## @param metrics.image.tag NGINX Prometheus exporter image tag (immutable tags are recommended)
  ## @param metrics.image.pullPolicy NGINX Prometheus exporter image pull policy
  ## @param metrics.image.pullSecrets Specify docker-registry secret names as an array
  ##
  image:
    registry: docker.io
    repository: bitnami/nginx-exporter
    tag: 0.10.0-debian-10-r57
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## Prometheus exporter container's resource requests and limits
  ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
  ## @param metrics.resources.limits The resources limits for the Prometheus exporter container
  ## @param metrics.resources.requests The requested resources for the Prometheus exporter container
  ##
  resources:
    limits: {}
    requests: {}
  ## Prometheus exporter service parameters
  ##
  service:
    ## @param metrics.service.port Metrics service port
    ##
    port: 9113
    ## @param metrics.service.annotations [object] Additional custom annotations for Metrics service
    ##
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9113"
  ## Prometheus Service Monitor
  ## ref: https://github.com/coreos/prometheus-operator
  ##      https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
  ##
  serviceMonitor:
    ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
    ##
    enabled: false
    ## @param metrics.serviceMonitor.namespace The namespace in which the ServiceMonitor will be created
    ##
    namespace: "monitoring"
    ## @param metrics.serviceMonitor.interval The interval at which metrics should be scraped
    ##
    interval: 30s
    ## @param metrics.serviceMonitor.scrapeTimeout The timeout after which the scrape is ended
    ##
    scrapeTimeout: ""
    ## @param metrics.serviceMonitor.relabellings Metrics relabellings to add to the scrape endpoint
    ##
    relabellings: []
    ## @param metrics.serviceMonitor.honorLabels Labels to honor to add to the scrape endpoint
    ##
    honorLabels: false
    ## @param metrics.serviceMonitor.additionalLabels Additional custom labels for the ServiceMonitor
    ##
    additionalLabels: {}

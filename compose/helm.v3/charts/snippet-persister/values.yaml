global:
  # Default node selector for bigid services (except of rmq/mongo/redis)
  nodeSelector: {}
  ## @param affinity Affinity for pod assignment. Evaluated as a template
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}
  ## @param master.tolerations Tolerations for master-elegible pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []
  ## Default podAnnotations for bigid pods (except of rmq/mongo/redis)
  podAnnotations: {}
  bigid:
    snippetPersister:
      create: false
      replicaCount: 1
      serviceAccount:
        create: true
        annotations: {}
      image:
        repository: "bigid-snippet-persister"
      heapSizePercent: 85
      securityContext:
        # capabilities:
        #   drop:
        #   - ALL
        # # readOnlyRootFilesystem: true
        # allowPrivilegeEscalation: false
        # runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
      updateStrategy:
        type: RollingUpdate
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 0
      port: 9990
      extraEnvVars: []
      ## Calculated according to the pods limits. Possible configuration: -Xms4g -Xmx4g
      JavaOpts: ""
      simulator: false
      postgres:
        enabled: true
        endpoint: ""
        db: "postgres"
        schema: "public"
        username: ""
        password: ""
        authentication: AWS_SECRET_MANAGER
        arnRole: ""
        awsSecretId: ""
        # Enable @global.bigid.snippetPersister.postgres.existingAuthSecret to use pre-created authentication secret
        # When enabled a secret named 'bigid-snippet-persister-postgressn' needs to be created before Helm installation
        # with the following environment variables:
        # - postgress_username
        # - postgress_password
        existingAuthSecret:
          enabled: false
        pool:
          size: 100
          connectionTimeout: 150000
          maxLifetime: 90000
          keepAliveTime: 0
          leakThreshold: 0
      snowflake:
        enabled: false
        username: ""
        token: ""
        account: ""
        database: ""
        schema: ""
        region: ""
        authentication: USERNAME_PASSWORD
        warehouse: WAREHOUSE
        oAuthRefreshTokenOnStartup: true
        oauthRefreshToken: ""
        oAuthClientId: ""
        awsOAuthSecretId: ""
        oauthSecret: ""
        arnRole: ""
        pool:
          size: 20
          connectionTimeout: 30000
          maxLifetime: 1800000
          keepAliveTime: 0
          leakThreshold: 0
      resources:
        requests:
          memory: 512Mi
          cpu: 250m
        limits:
          memory: 3Gi
          cpu: 1500m
      logLevel: info
      enableSimulator: "false"
